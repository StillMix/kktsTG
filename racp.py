import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp
from datetime import datetime, timedelta
import websockets
import json
import asyncio

USER_DATA_FILE = 'user_data.json'

def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
# –ü—Ä–∏–º–µ—Ä URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
SCHEDULE_API_URL = "http://127.0.0.1:8000/lesson/"


async def fetch_teacher_name(teacher_id):
    if not teacher_id:
        return ""
    
    try:
        url = f"http://127.0.0.1:8000/teachers/{teacher_id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º fullname –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
                    name = data.get("user", {}).get("fullname")
                    if name:
                        return name
                    else:
                        print(f"‚ö†Ô∏è –£—á–∏—Ç–µ–ª—å {teacher_id} –Ω–∞–π–¥–µ–Ω, –Ω–æ fullname –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user: {data}")
                        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ID {teacher_id}: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"




async def listen_for_schedule_updates(user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE):
    uri = f"ws://127.0.0.1:8000/ws/{user_id}"
    try:
        async with websockets.connect(uri) as websocket:
            while True:
                message = await websocket.recv()
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", message)

                if message.startswith("newlesson:"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
                    group = message.split(":", 1)[1].strip()
                    chat_id = update.message.chat_id
                    user_data = load_user_data()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if str(chat_id) in user_data:
                        user_info = user_data[str(chat_id)]
                        role = user_info.get('role', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

                        if user_info is None:
                            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
                            return

                        if role == 'user':
                            user_group = user_info.get("group")

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
                    if role == 'user' and user_group == group:
                        await send_schedule(update, group)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                elif message.startswith("newlessonteacher:"):
                        if role == 'teacher':
                            teacher_id = message.split(":", 1)[1].strip()
                            print('–£—á–∏—Ç–µ–ª—å—Å–∫–∏–π –ò–î:', str(user_info.get("id")), str(user_info.get("id")) == teacher_id)
                            if str(user_info.get("id")) == teacher_id:  # –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                                await send_schedule(update, group, teacher_id)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                elif message.startswith("newlessonteacher2:"):
                        if role == 'teacher':
                            print('–£—á–∏—Ç–µ–ª—å—Å–∫–∏–π23 –ò–î:', message.split(":", 1)[1].strip())
                            teacher2_id = message.split(":", 1)[1].strip()
                            if teacher2_id:
                                print('–£—á–∏—Ç–µ–ª—å—Å–∫–∏–π2 –ò–î:', str(user_info.get("id")), str(user_info.get("id")) == teacher2_id)
                                if str(user_info.get("id")) == teacher2_id:  # –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                                    await send_schedule(update, group, teacher2_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def send_schedule(update, group, teacher_id=None):
    async with aiohttp.ClientSession() as session:
        async with session.get("http://127.0.0.1:8000/lesson/") as resp:
            if resp.status == 200:
                data = await resp.json()
                lessons = data.get("lessons", [])

                tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

                for day in lessons:
                    if day.get("date") == tomorrow:
                        await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
                        for lesson in day.get("sessions", []):
                            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
                            if teacher_id is None and lesson.get("group") == group:
                                await send_lesson_details(update, lesson)
                            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                            elif teacher_id and (lesson.get("teacher") == teacher_id or lesson.get("teacher2") == teacher_id):
                                await send_lesson_details(update, lesson)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
async def send_lesson_details(update, lesson):
    teacher_name = await fetch_teacher_name(lesson["teacher"])
    teacher2_name = await fetch_teacher_name(lesson.get("teacher2"))

    text = (
        f"üìö {lesson['name']}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {lesson['group']}\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n"
    )
    if teacher2_name:
        text += f"üë©‚Äçüè´ –í—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher2_name}\n"
    text += (
        f"üïí –í—Ä–µ–º—è: {lesson['start']} - {lesson['end']}\n"
        f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['clases']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {lesson['adress']}\n"
    )

    await update.message.reply_text(text)

async def start_schedule_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data = load_user_data()
    user_info = user_data[str(chat_id)]
    user_id = user_info.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ context.user_data –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    if not user_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω user_id.")
        return
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è WebSocket
    asyncio.create_task(listen_for_schedule_updates(user_id, update, context))