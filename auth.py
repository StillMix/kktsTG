import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import json

USER_DATA_FILE = 'user_data.json'
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
LOGIN, PASSWORD = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if chat_id in user_data:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–û–±–æ –º–Ω–µ" –∏ "–í—ã–π—Ç–∏"
        keyboard = [
            [KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")],
            [KeyboardButton("–û–±–æ –º–Ω–µ")],
            [KeyboardButton("–í—ã–π—Ç–∏")]
        ]
    else:
        await update.message.reply_text("üîê –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        keyboard = [
            [KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")]
        ]

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    global user_data
    try:
        with open(USER_DATA_FILE, 'r') as f:
            user_data = json.load(f)
    except FileNotFoundError:
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data():
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    return LOGIN

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
async def get_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id] = {'login': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat_id]['password'] = update.message.text

    login = user_data[update.message.chat_id]['login']
    password = user_data[update.message.chat_id]['password']

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSON
    headers = {'Content-Type': 'application/json'}
    json_data = {
        'login': login,
        'password': password
    }
    
    try:
        response = requests.post('http://127.0.0.1:8000/auth/login', json=json_data, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            access_token = data.get('access_token')
            if access_token:
                # –•—Ä–∞–Ω–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_data[update.message.chat_id].update({
                    'role': data.get('role'),
                    'fullname': data.get('fullname'),
                    'name': data.get('name'),
                    'gmail': data.get('gmail'),
                    'login': data.get('login'),
                    'vk': data.get('vk'),
                    'group': data.get('group'),
                    'id': data.get('id'),
                })

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–∞–π–ª
                save_user_data()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ fullname
                fullname = data.get('fullname', '').strip()
                name_parts = fullname.split()
                name = name_parts[1] if len(name_parts) > 1 else name_parts[0]

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–±–æ –º–Ω–µ" –∏ "–í—ã–π—Ç–∏"
                keyboard = [
                    [KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")],
                    [KeyboardButton("–û–±–æ –º–Ω–µ")],
                    [KeyboardButton("–í—ã–π—Ç–∏")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {name}!", reply_markup=reply_markup)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.")
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
async def cancel_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END
